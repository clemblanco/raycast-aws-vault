import { ActionPanel, Action, List, open } from "@raycast/api";
import { useMemo, useState } from "react";
import { execSync, spawn } from "child_process";
import parseColumns from "parse-columns";
import { resolve } from "path";
import { homedir } from "os";
import { useExec } from "@raycast/utils";

export default function Command() {
  const [searchText, setSearchText] = useState("");

  const { isLoading, data } = useExec("/opt/homebrew/bin/aws-vault", ["list"]);
  const profiles = useMemo<Profile[]>(() => parseTableListOutput(data || ""), [data]);

  const logout = async () => {
    execSync("/opt/homebrew/bin/aws-vault clear");
    await open("https://signin.aws.amazon.com/oauth?Action=logout&redirect_uri=https://aws.amazon.com");
  };

  return (
    <List
      isLoading={isLoading}
      onSearchTextChange={setSearchText}
      searchBarPlaceholder="Search one of your AWS profiles..."
      throttle
    >
      <List.Section title="Profiles" subtitle={profiles.length + ""}>
        {profiles
          .filter((profile) => new RegExp(searchText, "i").test(profile.name))
          .map((profile) => (
            <ProfileListItem key={profile.name} profile={profile} />
          ))}
        <List.Item
          title="Logout"
          icon="ðŸ”’"
          actions={
            <ActionPanel>
              <ActionPanel.Section>
                <Action title="Open in Browser" onAction={logout} />
              </ActionPanel.Section>
            </ActionPanel>
          }
        />
      </List.Section>
    </List>
  );
}

function ProfileListItem({ profile }: { profile: Profile }) {
  const onClick = async () => {
    /** Prepare Chrome profile directories */
    const profile_dir_name = profile.name.replace(/^a-zA-Z0-9_-/i, "__");
    const user_data_dir = resolve(homedir(), `.aws/chrome/${profile_dir_name}`);
    execSync(`mkdir -p ${user_data_dir}`);
    const disk_cache_dir = execSync(`mktemp -d /tmp/aws_chrome_cache.XXXXXXXX`).toString().trim();
    const randomColor = ["r", "g", "b"].map(() => Math.floor(Math.random() * 256)).join(",");

    /** Trigger Login */
    const login = spawn("/opt/homebrew/bin/aws-vault", ["login", "--stdout", profile.name]);
    /** Handling SSO if needed to create session */
    login.stderr.on("data", async (data) => {
      const output = data.toString().trim();

      if (output.includes("Opening the SSO authorization page in your default browser")) {
        await open(output.slice(output.indexOf("http")));
      }
    });
    /** Prepare URL with active session */
    login.stdout.on("data", (data) => {
      const url = data.toString().trim();

      execSync(
        `/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome \
          --no-first-run \
          --user-data-dir=${user_data_dir} \
          --disk-cache-dir=${disk_cache_dir} \
          --new-window \
          --install-autogenerated-theme=${randomColor} \
          "${url}" > /dev/null 2>&1 &`
      );
    });
  };

  return (
    <List.Item
      title={profile.name}
      subtitle={profile.session}
      icon="list-icon.png"
      actions={
        <ActionPanel>
          <ActionPanel.Section>
            <Action title="Open in Browser" onAction={onClick} />
          </ActionPanel.Section>
        </ActionPanel>
      }
    />
  );
}

/**
 * Parses and transforms the text table returned by `aws-vault list`
 * into an array of Profiles objects we can use programmatically.
 *
 * @param {String} tableList
 * @returns {Profile[]}
 */
const parseTableListOutput: (tableList: string) => Profile[] = (tableList: string) => {
  const list: ParsedList[] = [];

  parseColumns(tableList, {
    transform: (item, header, columnIndex, rowIndex) => {
      if (rowIndex < 1 || item === "-") {
        return;
      }

      list.push({
        item,
        header,
        columnIndex,
        rowIndex,
      });
    },
  });

  const profilesByRowIndex = list.reduce((acc, value) => {
    if (value.header === "Profile") {
      acc[value.rowIndex] = {
        ...acc[value.rowIndex],
        name: value.item,
      };
    }

    if (value.header === "Sessions") {
      acc[value.rowIndex] = {
        ...acc[value.rowIndex],
        session: value.item,
      };
    }

    return acc;
  }, {} as { [key: string]: ParsedProfile });

  return Object.values(profilesByRowIndex).filter((profile: ParsedProfile) => "name" in profile) as Profile[];
};

type ParsedList = {
  item: string;
  header: string;
  columnIndex: number;
  rowIndex: number;
};

type ParsedProfile = {
  name?: string;
  session?: string;
};

type Profile = {
  name: string;
  session?: string;
};
